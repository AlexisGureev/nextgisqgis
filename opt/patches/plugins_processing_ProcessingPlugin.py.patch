--- a/python/plugins/processing/ProcessingPlugin.py	2023-08-21 19:39:45.571058034 +0300
+++ b/python/plugins/processing/ProcessingPlugin.py	2023-11-06 20:01:10.000000000 +0300
@@ -37,8 +37,8 @@
                        QgsSettings)
 from qgis.gui import (QgsGui,
                       QgsOptionsWidgetFactory,
-                      QgsCustomDropHandler,
-                      QgsProcessingHistoryDialog)
+                      QgsCustomDropHandler)
+#                      QgsProcessingHistoryDialog)
 from qgis.PyQt.QtCore import (
     QObject,
     Qt,
@@ -205,11 +205,11 @@
     def initGui(self):
         # port old log, ONCE ONLY!
         settings = QgsSettings()
-        if not settings.value("/Processing/hasPortedOldLog", False, bool):
-            processing_history_provider = QgsGui.historyProviderRegistry().providerById('processing')
-            if processing_history_provider:
-                processing_history_provider.portOldLog()
-                settings.setValue("/Processing/hasPortedOldLog", True)
+        #if not settings.value("/Processing/hasPortedOldLog", False, bool):
+        #    processing_history_provider = QgsGui.historyProviderRegistry().providerById('processing')
+        #    if processing_history_provider:
+        #        processing_history_provider.portOldLog()
+        #        settings.setValue("/Processing/hasPortedOldLog", True)
 
         self.options_factory = ProcessingOptionsFactory()
         self.options_factory.setTitle(self.tr('Processing'))
@@ -227,12 +227,12 @@
         self.edit_features_locator_filter = InPlaceAlgorithmLocatorFilter()
         iface.registerLocatorFilter(self.edit_features_locator_filter)
 
-        QgsGui.historyProviderRegistry().providerById('processing').executePython.connect(
-            self._execute_history_commands
-        )
-        QgsGui.historyProviderRegistry().providerById('processing').createTest.connect(
-            self.create_test
-        )
+#        QgsGui.historyProviderRegistry().providerById('processing').executePython.connect(
+#            self._execute_history_commands
+#        )
+#        QgsGui.historyProviderRegistry().providerById('processing').createTest.connect(
+#            self.create_test
+#        )
 
         self.toolbox = ProcessingToolbox()
         self.iface.addDockWidget(Qt.RightDockWidgetArea, self.toolbox)
@@ -269,15 +269,15 @@
                                             QKeySequence('Ctrl+Alt+G').toString(QKeySequence.NativeText))
         self.menu.addAction(self.modelerAction)
 
-        self.historyAction = QAction(
-            QgsApplication.getThemeIcon("/mIconHistory.svg"),
-            QCoreApplication.translate('ProcessingPlugin', '&History…'), self.iface.mainWindow())
-        self.historyAction.setObjectName('historyAction')
-        self.historyAction.triggered.connect(self.openHistory)
-        self.iface.registerMainWindowAction(self.historyAction,
-                                            QKeySequence('Ctrl+Alt+H').toString(QKeySequence.NativeText))
-        self.menu.addAction(self.historyAction)
-        self.toolbox.processingToolbar.addAction(self.historyAction)
+        #self.historyAction = QAction(
+        #    QgsApplication.getThemeIcon("/mIconHistory.svg"),
+        #    QCoreApplication.translate('ProcessingPlugin', '&History…'), self.iface.mainWindow())
+        #self.historyAction.setObjectName('historyAction')
+        #self.historyAction.triggered.connect(self.openHistory)
+        #self.iface.registerMainWindowAction(self.historyAction,
+        #                                    QKeySequence('Ctrl+Alt+H').toString(QKeySequence.NativeText))
+        #self.menu.addAction(self.historyAction)
+        #self.toolbox.processingToolbar.addAction(self.historyAction)
 
         self.resultsAction = QAction(
             QgsApplication.getThemeIcon("/processingResult.svg"),
@@ -485,7 +485,7 @@
 
         self.iface.unregisterMainWindowAction(self.toolboxAction)
         self.iface.unregisterMainWindowAction(self.modelerAction)
-        self.iface.unregisterMainWindowAction(self.historyAction)
+        #self.iface.unregisterMainWindowAction(self.historyAction)
         self.iface.unregisterMainWindowAction(self.resultsAction)
 
         self.iface.unregisterOptionsWidgetFactory(self.options_factory)
@@ -534,10 +534,10 @@
         else:
             self.resultsDock.show()
 
-    def openHistory(self):
-        dlg = QgsProcessingHistoryDialog(self.iface.mainWindow())
-        dlg.setAttribute(Qt.WA_DeleteOnClose)
-        dlg.show()
+    #def openHistory(self):
+    #    dlg = QgsProcessingHistoryDialog(self.iface.mainWindow())
+    #    dlg.setAttribute(Qt.WA_DeleteOnClose)
+    #    dlg.show()
 
     def tr(self, message, disambiguation=None, n=-1):
         return QCoreApplication.translate('ProcessingPlugin', message, disambiguation=disambiguation, n=n)
