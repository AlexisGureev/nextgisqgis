--- a/src/core/raster/qgsexiftools.cpp	2023-08-21 19:39:45.739046118 +0300
+++ b/src/core/raster/qgsexiftools.cpp	2023-10-24 12:21:59.000000000 +0300
@@ -16,31 +16,42 @@
 #include "qgsexiftools.h"
 #include "qgspoint.h"
 
-#include <exiv2/exiv2.hpp>
+// #include <exiv2/exiv2.hpp>
+#include "cpl_string.h"
+#include "gdal_priv.h"
 
 #include <QDate>
 #include <QRegularExpression>
 #include <QFileInfo>
 #include <QTime>
 
-double readRationale( const Exiv2::Value &value, long n = 0 )
-{
-  const Exiv2::Rational rational = value.toRational( n );
-  return static_cast< double >( rational.first ) / rational.second;
-};
+//double readRationale( const Exiv2::Value &value, long n = 0 )
+//{
+//  const Exiv2::Rational rational = value.toRational( n );
+//  return static_cast< double >( rational.first ) / rational.second;
+//};
 
-double readCoordinate( const Exiv2::Value &value )
+double readCoordinate( const std::string &value )
 {
+    //EXIF_GPSLatitude=(50) (49) (8.592)
   double res = 0;
   double div = 1;
-  for ( int i = 0; i < 3; i++ )
+  CPLString localVal(value);
+  localVal.replaceAll('(', "");
+  localVal.replaceAll(')', "");
+  CPLStringList parts( CSLTokenizeString2( localVal, " ", CSLT_STRIPLEADSPACES | CSLT_STRIPENDSPACES ), TRUE );
+
+  for ( int i = 0; i < parts.size(); i++ )
   {
-    res += readRationale( value, i ) / div;
+    res += atof( parts[i] ) / div;
     div *= 60;
   }
   return res;
 };
 
+//TODO: Проверить где и как это работает в NGQGIS
+//необходимо привести decodeXmpData к виду decodeExifData?
+/*
 QVariant decodeXmpData( const QString &key, Exiv2::XmpData::const_iterator &it )
 {
   QVariant val;
@@ -128,47 +139,37 @@
     }
   }
   return val;
-}
+}*/
 
-QVariant decodeExifData( const QString &key, Exiv2::ExifData::const_iterator &it )
+QVariant decodeExifData( const QString &key, const std::string &value )
 {
   QVariant val;
 
-  if ( key == QLatin1String( "Exif.GPSInfo.GPSLatitude" ) ||
-       key == QLatin1String( "Exif.GPSInfo.GPSLongitude" ) ||
-       key == QLatin1String( "Exif.GPSInfo.GPSDestLatitude" ) ||
-       key == QLatin1String( "Exif.GPSInfo.GPSDestLongitude" ) )
+  if ( key == QLatin1String( "Exif_GPSLatitude" ) ||
+       key == QLatin1String( "Exif_GPSLongitude" ) ||
+       key == QLatin1String( "Exif_GPSDestLatitude" ) ||
+       key == QLatin1String( "Exif_GPSDestLongitude" ) )
   {
-    val = readCoordinate( it->value() );
+    val = readCoordinate( value );
   }
-  else if ( key == QLatin1String( "Exif.GPSInfo.GPSTimeStamp" ) )
+  else if ( key == QLatin1String( "Exif_GPSTimeStamp" ) )
   {
-    const QStringList parts = QString::fromStdString( it->toString() ).split( QRegularExpression( QStringLiteral( "\\s+" ) ) );
-    if ( parts.size() == 3 )
-    {
-      const int hour = readRationale( it->value(), 0 );
-      const int minute = readRationale( it->value(), 1 );
-      const int second = readRationale( it->value(), 2 );
-      val = QVariant::fromValue( QTime::fromString( QStringLiteral( "%1:%2:%3" )
-                                 .arg( QString::number( hour ).rightJustified( 2, '0' ) )
-                                 .arg( QString::number( minute ).rightJustified( 2, '0' ) )
-                                 .arg( QString::number( second ).rightJustified( 2, '0' ) ), QLatin1String( "hh:mm:ss" ) ) );
-    }
+    val = QVariant::fromValue( QTime::fromString( QString::fromStdString( value ), QLatin1String( "hh:mm:ss" ) ) );
   }
-  else if ( key == QLatin1String( "Exif.GPSInfo.GPSDateStamp" ) )
+  else if ( key == QLatin1String( "Exif_GPSDateStamp" ) )
   {
-    val = QVariant::fromValue( QDate::fromString( QString::fromStdString( it->toString() ), QLatin1String( "yyyy:MM:dd" ) ) );
+    val = QVariant::fromValue( QDate::fromString( QString::fromStdString( value ), QLatin1String( "yyyy:MM:dd" ) ) );
   }
-  else if ( key == QLatin1String( "Exif.Image.DateTime" ) ||
-            key == QLatin1String( "Exif.Image.DateTime" ) ||
-            key == QLatin1String( "Exif.Photo.DateTimeDigitized" ) ||
-            key == QLatin1String( "Exif.Photo.DateTimeOriginal" ) )
+  else if ( key == QLatin1String( "Exif_DateTime" ) ||
+            key == QLatin1String( "Exif_DateTime" ) ||
+            key == QLatin1String( "Exif_DateTimeDigitized" ) ||
+            key == QLatin1String( "Exif_DateTimeOriginal" ) )
   {
-    val = QVariant::fromValue( QDateTime::fromString( QString::fromStdString( it->toString() ), QLatin1String( "yyyy:MM:dd hh:mm:ss" ) ) );
+    val = QVariant::fromValue( QDateTime::fromString( QString::fromStdString( value ), QLatin1String( "yyyy:MM:dd hh:mm:ss" ) ) );
   }
   else
   {
-    switch ( it->typeId() )
+/*    switch ( it->typeId() )
     {
       case Exiv2::asciiString:
       case Exiv2::string:
@@ -240,7 +241,9 @@
       case Exiv2::lastTypeId:
         val = QString::fromStdString( it->toString() );
         break;
-    }
+
+    }*/
+    val = QString::fromStdString( value );
   }
   return val;
 }
@@ -252,8 +255,7 @@
   const double m = 60 * ( d - degrees );
   const int minutes = static_cast< int >( std::floor( m ) );
   const double s = 60 * ( m - minutes );
-  const int seconds = static_cast< int >( std::floor( s * 1000 ) );
-  return QStringLiteral( "%1/1 %2/1 %3/1000" ).arg( degrees ).arg( minutes ).arg( seconds );
+  return QStringLiteral( "%1 %2 %3" ).arg( degrees ).arg( minutes ).arg( s );
 }
 
 QVariant QgsExifTools::readTag( const QString &imagePath, const QString &key )
@@ -261,16 +263,16 @@
   if ( !QFileInfo::exists( imagePath ) )
     return QVariant();
 
-  try
+/*  if ( key.startsWith( QLatin1String( "Xmp." ) ) )
   {
-    std::unique_ptr< Exiv2::Image > image( Exiv2::ImageFactory::open( imagePath.toStdString() ) );
-    if ( !image || key.isEmpty() )
-      return QVariant();
+      std::unique_ptr< Exiv2::Image > image( Exiv2::ImageFactory::open( imagePath.toStdString() ) );
+      if ( !image || key.isEmpty() )
+        return QVariant();
 
-    image->readMetadata();
+      image->readMetadata();
+
+      image->readMetadata();
 
-    if ( key.startsWith( QLatin1String( "Xmp." ) ) )
-    {
       Exiv2::XmpData &xmpData = image->xmpData();
       if ( xmpData.empty() )
       {
@@ -278,21 +280,21 @@
       }
       Exiv2::XmpData::const_iterator i = xmpData.findKey( Exiv2::XmpKey( key.toUtf8().constData() ) );
       return i != xmpData.end() ? decodeXmpData( key, i ) : QVariant();
-    }
-    else
-    {
-      Exiv2::ExifData &exifData = image->exifData();
-      if ( exifData.empty() )
-      {
-        return QVariant();
-      }
-      Exiv2::ExifData::const_iterator i = exifData.findKey( Exiv2::ExifKey( key.toUtf8().constData() ) );
-      return i != exifData.end() ? decodeExifData( key, i ) : QVariant();
-    }
   }
-  catch ( ... )
+  else*/
   {
-    return QVariant();
+      QVariant res;
+      GDALDataset *ds = reinterpret_cast<GDALDataset*>(
+          GDALOpenEx(imagePath.toStdString().c_str(),
+              GDAL_OF_RASTER | GDAL_OF_SHARED | GDAL_OF_READONLY | GDAL_OF_VERBOSE_ERROR,
+              nullptr, nullptr, nullptr));
+      if (ds == nullptr)
+      {
+          return res;
+      }
+
+      CPLStringList metadata( ds->GetMetadata(), TRUE );
+      return decodeExifData( key, metadata[key.toUtf8().constData()] );
   }
 }
 
@@ -301,42 +303,32 @@
   if ( !QFileInfo::exists( imagePath ) )
     return QVariantMap();
 
-  try
+  QVariantMap res;
+  GDALDataset *ds = reinterpret_cast<GDALDataset*>(
+      GDALOpenEx(imagePath.toStdString().c_str(),
+          GDAL_OF_RASTER | GDAL_OF_SHARED | GDAL_OF_READONLY | GDAL_OF_VERBOSE_ERROR,
+          nullptr, nullptr, nullptr));
+  if (ds == nullptr)
   {
-    QVariantMap res;
-    std::unique_ptr< Exiv2::Image > image( Exiv2::ImageFactory::open( imagePath.toStdString() ) );
-    if ( !image )
-      return QVariantMap();
-    image->readMetadata();
-
-    Exiv2::ExifData &exifData = image->exifData();
-    if ( !exifData.empty() )
-    {
-      const Exiv2::ExifData::const_iterator end = exifData.end();
-      for ( Exiv2::ExifData::const_iterator i = exifData.begin(); i != end; ++i )
-      {
-        const QString key = QString::fromStdString( i->key() );
-        res.insert( key, decodeExifData( key, i ) );
-      }
-    }
-
-    Exiv2::XmpData &xmpData = image->xmpData();
-    if ( !xmpData.empty() )
-    {
-      const Exiv2::XmpData::const_iterator end = xmpData.end();
-      for ( Exiv2::XmpData::const_iterator i = xmpData.begin(); i != end; ++i )
+      return res;
+  }
+  CPLStringList metadata( ds->GetMetadata(), TRUE );
+  for(int i = 0; i < metadata.size(); i++)
+  {
+      char *pszKey = nullptr;
+      const char *pszValue = CPLParseNameValue( metadata[i], &pszKey );
+      if( pszKey )
       {
-        const QString key = QString::fromStdString( i->key() );
-        res.insert( key, decodeXmpData( key, i ) );
+          const QString key = QString::fromStdString( pszKey );
+          res.insert( key, decodeExifData( key, pszValue ) );
+          CPLFree( pszKey );
       }
-    }
 
-    return res;
-  }
-  catch ( ... )
-  {
-    return QVariantMap();
+      //TODO add decodeXmpData
+      //res.insert( key, decodeXmpData( key, i ) );
   }
+
+  return res;
 }
 
 bool QgsExifTools::hasGeoTag( const QString &imagePath )
@@ -348,35 +340,45 @@
 
 QgsPoint QgsExifTools::getGeoTag( const QString &imagePath, bool &ok )
 {
-  ok = false;
-  if ( !QFileInfo::exists( imagePath ) )
-    return QgsPoint();
-  try
-  {
-    std::unique_ptr< Exiv2::Image > image( Exiv2::ImageFactory::open( imagePath.toStdString() ) );
-    if ( !image )
-      return QgsPoint();
-
-    image->readMetadata();
-    Exiv2::ExifData &exifData = image->exifData();
+    ok = false;
+    if ( !QFileInfo::exists( imagePath ) )
+        return QgsPoint();
 
-    if ( exifData.empty() )
-      return QgsPoint();
-
-    const Exiv2::ExifData::iterator itLatRef = exifData.findKey( Exiv2::ExifKey( "Exif.GPSInfo.GPSLatitudeRef" ) );
-    const Exiv2::ExifData::iterator itLatVal = exifData.findKey( Exiv2::ExifKey( "Exif.GPSInfo.GPSLatitude" ) );
-    const Exiv2::ExifData::iterator itLonRef = exifData.findKey( Exiv2::ExifKey( "Exif.GPSInfo.GPSLongitudeRef" ) );
-    const Exiv2::ExifData::iterator itLonVal = exifData.findKey( Exiv2::ExifKey( "Exif.GPSInfo.GPSLongitude" ) );
-
-    if ( itLatRef == exifData.end() || itLatVal == exifData.end() ||
-         itLonRef == exifData.end() || itLonVal == exifData.end() )
-      return QgsPoint();
+    GDALDataset *ds = reinterpret_cast<GDALDataset*>(
+        GDALOpenEx(imagePath.toStdString().c_str(),
+            GDAL_OF_RASTER | GDAL_OF_SHARED | GDAL_OF_READONLY | GDAL_OF_VERBOSE_ERROR,
+            nullptr, nullptr, nullptr));
+    if (ds == nullptr)
+    {
+        return QgsPoint();
+    }
 
-    double lat = readCoordinate( itLatVal->value() );
-    double lon = readCoordinate( itLonVal->value() );
+    CPLStringList metadata( ds->GetMetadata(), TRUE );
+    auto latitudeRef = metadata["Exif_GPSLatitudeRef"];
+    if(latitudeRef == nullptr)
+    {
+        return QgsPoint();
+    }
+    auto latitude = metadata["Exif_GPSLatitude"];
+    if(latitude == nullptr)
+    {
+        return QgsPoint();
+    }
+    auto longitudeRef = metadata["Exif_GPSLongitudeRef"];
+    if(longitudeRef == nullptr)
+    {
+        return QgsPoint();
+    }
+    auto longitude = metadata["Exif_GPSLongitude"];
+    if(longitude == nullptr)
+    {
+        return QgsPoint();
+    }
+    double lat = readCoordinate( latitude );
+    double lon = readCoordinate( longitude );
+    const QString latRef = QString::fromStdString( latitudeRef );
+    const QString lonRef = QString::fromStdString( longitudeRef );
 
-    const QString latRef = QString::fromStdString( itLatRef->value().toString() );
-    const QString lonRef = QString::fromStdString( itLonRef->value().toString() );
     if ( latRef.compare( QLatin1String( "S" ), Qt::CaseInsensitive ) == 0 )
     {
       lat *= -1;
@@ -388,14 +390,15 @@
 
     ok = true;
 
-    const Exiv2::ExifData::iterator itElevVal = exifData.findKey( Exiv2::ExifKey( "Exif.GPSInfo.GPSAltitude" ) );
-    const Exiv2::ExifData::iterator itElevRefVal = exifData.findKey( Exiv2::ExifKey( "Exif.GPSInfo.GPSAltitudeRef" ) );
-    if ( itElevVal != exifData.end() )
+    auto elevVal = metadata["Exif_GPSAltitude"];
+    auto elevRefVal = metadata["Exif_GPSAltitudeRef"];
+
+    if ( elevVal != nullptr )
     {
-      double elev = readRationale( itElevVal->value() );
-      if ( itElevRefVal != exifData.end() )
+      double elev = atof( elevVal );
+      if ( elevRefVal != nullptr )
       {
-        const QString elevRef = QString::fromStdString( itElevRefVal->value().toString() );
+        const QString elevRef = QString::fromStdString( elevRefVal );
         if ( elevRef.compare( QLatin1String( "1" ), Qt::CaseInsensitive ) == 0 )
         {
           elev *= -1;
@@ -407,48 +410,68 @@
     {
       return QgsPoint( lon, lat );
     }
-  }
-  catch ( ... )
-  {
-    return QgsPoint();
-  }
 }
 
 bool QgsExifTools::geoTagImage( const QString &imagePath, const QgsPointXY &location, const GeoTagDetails &details )
 {
-  try
-  {
-    std::unique_ptr< Exiv2::Image > image( Exiv2::ImageFactory::open( imagePath.toStdString() ) );
-    if ( !image )
-      return false;
-
-    image->readMetadata();
-    Exiv2::ExifData &exifData = image->exifData();
-
-    exifData["Exif.GPSInfo.GPSVersionID"] = "2 0 0 0";
-    exifData["Exif.GPSInfo.GPSMapDatum"] = "WGS-84";
-    exifData["Exif.GPSInfo.GPSLatitude"] = doubleToExifCoordinateString( location.y() ).toStdString();
-    exifData["Exif.GPSInfo.GPSLongitude"] = doubleToExifCoordinateString( location.x() ).toStdString();
+    GDALDataset *ds = reinterpret_cast<GDALDataset*>(
+        GDALOpenEx(imagePath.toStdString().c_str(),
+            GDAL_OF_RASTER | GDAL_OF_SHARED | GDAL_OF_UPDATE | GDAL_OF_VERBOSE_ERROR,
+            nullptr, nullptr, nullptr));
+    if (ds == nullptr)
+    {
+        return false;
+    }
+    if (ds->SetMetadataItem("EXIF_GPSVersionID", "0200", nullptr) >= CE_Failure)
+    {
+        return false;
+    }
+    if (ds->SetMetadataItem("EXIF_GPSMapDatum", "WGS-84", nullptr) >= CE_Failure)
+    {
+        return false;
+    }
+    if (ds->SetMetadataItem("EXIF_GPSLatitude", doubleToExifCoordinateString( location.y() ).toStdString().c_str(), nullptr) >= CE_Failure)
+    {
+        return false;
+    }
+    if (ds->SetMetadataItem("EXIF_GPSLongitude", doubleToExifCoordinateString( location.x() ).toStdString().c_str(), nullptr) >= CE_Failure)
+    {
+        return false;
+    }
     if ( !std::isnan( details.elevation ) )
     {
-      const QString elevationString = QStringLiteral( "%1/1000" ).arg( static_cast< int>( std::floor( std::abs( details.elevation ) * 1000 ) ) );
-      exifData["Exif.GPSInfo.GPSAltitude"] = elevationString.toStdString();
-      exifData["Exif.GPSInfo.GPSAltitudeRef"] = details.elevation < 0.0 ? "1" : "0";
-    }
-    exifData["Exif.GPSInfo.GPSLatitudeRef"] = location.y() > 0 ? "N" : "S";
-    exifData["Exif.GPSInfo.GPSLongitudeRef"] = location.x() > 0 ? "E" : "W";
-    exifData["Exif.Image.GPSTag"] = 4908;
-    image->writeMetadata();
-  }
-  catch ( ... )
-  {
-    return false;
-  }
+        const QString elevationString = QStringLiteral( "%1/1000" ).arg( static_cast< int>( std::floor( std::abs( details.elevation ) * 1000 ) ) );
+        if (ds->SetMetadataItem("EXIF_GPSAltitude", elevationString.toStdString().c_str(), nullptr) >= CE_Failure)
+        {
+            return false;
+        }
+        if (ds->SetMetadataItem("EXIF_GPSAltitudeRef", details.elevation < 0.0 ? "1" : "0", nullptr) >= CE_Failure)
+        {
+            return false;
+        }
+    }
+    if (ds->SetMetadataItem("EXIF_GPSLatitudeRef", location.y() > 0 ? "N" : "S", nullptr) >= CE_Failure)
+    {
+        return false;
+    }
+    if (ds->SetMetadataItem("EXIF_GPSLongitudeRef", location.x() > 0 ? "E" : "W", nullptr) >= CE_Failure)
+    {
+        return false;
+    }
+    if (ds->SetMetadataItem("EXIF_GPSTag", "4908", nullptr) >= CE_Failure)
+    {
+        return false;
+    }
+    GDALClose(ds);
+
   return true;
 }
 
 bool QgsExifTools::tagImage( const QString &imagePath, const QString &tag, const QVariant &value )
 {
+  //DEBUG:
+  return false;
+/*
   try
   {
     std::unique_ptr< Exiv2::Image > image( Exiv2::ImageFactory::open( imagePath.toStdString() ) );
@@ -573,5 +596,5 @@
   {
     return false;
   }
-  return true;
+  return true;*/
 }
