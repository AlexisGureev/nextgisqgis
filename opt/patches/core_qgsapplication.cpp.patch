--- a/src/core/qgsapplication.cpp	2023-08-21 19:39:45.727046968 +0300
+++ b/src/core/qgsapplication.cpp	2023-10-24 19:02:52.000000000 +0300
@@ -42,7 +42,7 @@
 #include "qgscolorschemeregistry.h"
 #include "qgspainteffectregistry.h"
 #include "qgsprojectstorageregistry.h"
-#include "qgsexternalstorageregistry.h"
+// #include "qgsexternalstorageregistry.h"
 #include "qgsrasterrendererregistry.h"
 #include "qgsrendererregistry.h"
 #include "qgspointcloudrendererregistry.h"
@@ -68,7 +68,7 @@
 #include "qgsstyle.h"
 #include "qgsprojutils.h"
 #include "qgsvaliditycheckregistry.h"
-#include "qgsnewsfeedparser.h"
+// #include "qgsnewsfeedparser.h"
 #include "qgsbookmarkmanager.h"
 #include "qgsstylemodel.h"
 #include "qgsconnectionregistry.h"
@@ -77,16 +77,16 @@
 #include "qgsfeaturestore.h"
 #include "qgslocator.h"
 #include "qgsreadwritelocker.h"
-#include "qgsbabelformatregistry.h"
+// #include "qgsbabelformatregistry.h"
 #include "qgsdbquerylog.h"
 #include "qgsfontmanager.h"
 #include "qgsunsetattributevalue.h"
 #include "qgscolorrampimpl.h"
 #include "qgsinterval.h"
-#include "qgsgpsconnection.h"
+// #include "qgsgpsconnection.h"
 #include "qgssensorregistry.h"
 
-#include "gps/qgsgpsconnectionregistry.h"
+// #include "gps/qgsgpsconnectionregistry.h"
 #include "processing/qgsprocessingregistry.h"
 #include "processing/models/qgsprocessingmodelchildparametersource.h"
 #include "processing/models/qgsprocessingmodelchilddependency.h"
@@ -150,6 +150,24 @@
 
 #include <proj.h>
 
+#include "ngauthmanager.h"
+
+#ifdef Q_OS_MAC
+static void translationPath(const QString &basePath,
+                               QList<QString> &localePaths)
+{
+    QDir baseDir(basePath);
+    QStringList filters;
+    filters << QString("ngstd_*.framework");
+    QStringList list = baseDir.entryList(filters);
+    for (const QString &subPath : list) {
+        const QString &libTrPath = basePath + "/" + subPath +
+                "/Resources/translations";
+        localePaths.append(libTrPath);
+    }
+}
+#endif // Q_OS_MAC
+
 #if defined(Q_OS_LINUX)
 #include <sys/sysinfo.h>
 #endif
@@ -162,6 +180,9 @@
 const char *QgsApplication::QGIS_ORGANIZATION_NAME = "QGIS";
 const char *QgsApplication::QGIS_ORGANIZATION_DOMAIN = "qgis.org";
 const char *QgsApplication::QGIS_APPLICATION_NAME = "QGIS3";
+const char *QgsApplication::NGQGIS_ORGANIZATION_NAME = VENDOR;
+const char *QgsApplication::NGQGIS_ORGANIZATION_DOMAIN = VENDOR_DOMAIN;
+const char *QgsApplication::NGQGIS_APPLICATION_NAME = APP_NAME;
 QgsApplication::ApplicationMembers *QgsApplication::sApplicationMembers = nullptr;
 QgsAuthManager *QgsApplication::sAuthManager = nullptr;
 int ABISYM( QgsApplication::sMaxThreads ) = -1;
@@ -228,13 +249,22 @@
 
   if ( profileFolder.isEmpty() )
   {
-    if ( getenv( "QGIS_CUSTOM_CONFIG_PATH" ) )
-    {
-      profileFolder = getenv( "QGIS_CUSTOM_CONFIG_PATH" );
-    }
-    else
+    profileFolder = QString::fromLocal8Bit( qgetenv( "QGIS_CUSTOM_CONFIG_PATH" ) );
+
+    if( profileFolder.isEmpty() )
     {
-      profileFolder = QStandardPaths::standardLocations( QStandardPaths::AppDataLocation ).value( 0 );
+        QString config;
+      #ifdef Q_OS_MAC
+        config = QStringLiteral("Library/Application Support");
+      #else
+        config = QStringLiteral(".config");
+      #endif
+        profileFolder = QString( "%1%2qgis%3" )
+                .arg( QDir::homePath() + QDir::separator() + config + QDir::separator())
+                .arg( QStringLiteral(VENDOR) + QDir::separator() )
+                .arg( VERSION_INT / 10000 );
+        qputenv("QGIS_CUSTOM_CONFIG_PATH", profileFolder.toUtf8());        
+    //   profileFolder = QStandardPaths::standardLocations( QStandardPaths::AppDataLocation ).value( 0 );
     }
     // This will normally get here for custom scripts that use QgsApplication.
     // This doesn't get this hit for QGIS Desktop because we setup the profile via main
@@ -281,7 +311,7 @@
     qRegisterMetaType<QgsPoint>( "QgsPoint" );
     qRegisterMetaType<QgsDatumTransform::GridDetails>( "QgsDatumTransform::GridDetails" );
     qRegisterMetaType<QgsDatumTransform::TransformDetails>( "QgsDatumTransform::TransformDetails" );
-    qRegisterMetaType<QgsNewsFeedParser::Entry>( "QgsNewsFeedParser::Entry" );
+    // qRegisterMetaType<QgsNewsFeedParser::Entry>( "QgsNewsFeedParser::Entry" );
     qRegisterMetaType<QgsRectangle>( "QgsRectangle" );
     qRegisterMetaType<QgsLocatorResult>( "QgsLocatorResult" );
     qRegisterMetaType<QgsGradientColorRamp>( "QgsGradientColorRamp" );
@@ -309,7 +339,7 @@
     qRegisterMetaType<QMap<QNetworkRequest::KnownHeaders, QVariant>>( "QMap<QNetworkRequest::KnownHeaders,QVariant>" );
     qRegisterMetaType<QList<QNetworkReply::RawHeaderPair>>( "QList<QNetworkReply::RawHeaderPair>" );
     qRegisterMetaType< QAuthenticator * >( "QAuthenticator*" );
-    qRegisterMetaType< QgsGpsInformation >( "QgsGpsInformation" );
+//    qRegisterMetaType< QgsGpsInformation >( "QgsGpsInformation" );
   } );
 
   ( void ) resolvePkgPath();
@@ -372,9 +402,14 @@
   *sDefaultSvgPaths() << qgisSettingsDirPath() + QStringLiteral( "svg/" );
 
   *sAuthDbDirPath() = qgisSettingsDirPath();
-  if ( getenv( "QGIS_AUTH_DB_DIR_PATH" ) )
+  QString authDBDirPath = QString::fromLocal8Bit( qgetenv( "QGIS_AUTH_DB_DIR_PATH" ) );
+  if (!authDBDirPath.isEmpty())
+  {
+    setAuthDatabaseDirPath( authDBDirPath );
+  }
+  else
   {
-    setAuthDatabaseDirPath( getenv( "QGIS_AUTH_DB_DIR_PATH" ) );
+    setAuthDatabaseDirPath( qgisSettingsDirPath() );
   }
 
   // force use of OpenGL renderer for Qt3d.
@@ -400,28 +435,30 @@
   *sSystemEnvVars() = systemEnvVarMap;
 
   // append local user-writable folder as a proj search path
-  QStringList currentProjSearchPaths = QgsProjUtils::searchPaths();
-  currentProjSearchPaths.append( qgisSettingsDirPath() + QStringLiteral( "proj" ) );
-#ifdef Q_OS_MACX
-  // append bundled proj lib for MacOS
-  QString projLib( QDir::cleanPath( pkgDataPath().append( "/proj" ) ) );
-  if ( QFile::exists( projLib ) )
-  {
-    currentProjSearchPaths.append( projLib );
-  }
-#endif // Q_OS_MACX
-
-  char **newPaths = new char *[currentProjSearchPaths.length()];
-  for ( int i = 0; i < currentProjSearchPaths.count(); ++i )
-  {
-    newPaths[i] = CPLStrdup( currentProjSearchPaths.at( i ).toUtf8().constData() );
-  }
-  proj_context_set_search_paths( nullptr, currentProjSearchPaths.count(), newPaths );
-  for ( int i = 0; i < currentProjSearchPaths.count(); ++i )
-  {
-    CPLFree( newPaths[i] );
-  }
-  delete [] newPaths;
+//   QStringList currentProjSearchPaths = QgsProjUtils::searchPaths();
+//   currentProjSearchPaths.append( qgisSettingsDirPath() + QStringLiteral( "proj" ) );
+// #ifdef Q_OS_MACX
+//   // append bundled proj lib for MacOS
+//   // Library/Frameworks/proj.framework/Resources/proj
+//   QString projLib( QDir::cleanPath( pkgDataPath().append( "/proj" ) ) );
+//   if ( QFile::exists( projLib ) )
+//   {
+//     currentProjSearchPaths.append( projLib );
+//   }
+// #endif // Q_OS_MACX
+
+//   char **newPaths = new char *[currentProjSearchPaths.length()];
+//   for ( int i = 0; i < currentProjSearchPaths.count(); ++i )
+//   {
+//     newPaths[i] = CPLStrdup( currentProjSearchPaths.at( i ).toUtf8().constData() );
+//   }
+//   proj_context_set_search_paths( nullptr, currentProjSearchPaths.count(), newPaths );
+//   for ( int i = 0; i < currentProjSearchPaths.count(); ++i )
+//   {
+//     CPLFree( newPaths[i] );
+//   }
+//   delete [] newPaths;
+//   qputenv("PROJ_LIB", currentProjSearchPaths[0].toUtf8());
 
   // allow Qt to search for Qt plugins (e.g. sqldrivers) in our plugin directory
   QCoreApplication::addLibraryPath( pluginPath() );
@@ -455,52 +492,99 @@
   ABISYM( mInitialized ) = true;
 }
 
-
 void QgsApplication::installTranslators()
 {
-  if ( *sTranslation() != QLatin1String( "C" ) )
+  if ( *sTranslation() != QStringLiteral( "C" ) )
   {
-    mQgisTranslator = new QTranslator( this );
-    if ( mQgisTranslator->load( QStringLiteral( "qgis_" ) + *sTranslation(), i18nPath() ) )
-    {
-      installTranslator( mQgisTranslator );
-    }
-    else
-    {
-      QgsDebugMsgLevel( QStringLiteral( "loading of qgis translation failed %1/qgis_%2" ).arg( i18nPath(), *sTranslation() ), 2 );
-    }
-
-    /* Translation file for Qt.
-     * The strings from the QMenuBar context section are used by Qt/Mac to shift
-     * the About, Preferences and Quit items to the Mac Application menu.
-     * These items must be translated identically in both qt_ and qgis_ files.
-     */
-    QString qtTranslationsPath = QLibraryInfo::location( QLibraryInfo::TranslationsPath );
-#ifdef __MINGW32__
-    QString prefix = QDir( QString( "%1/../" ).arg( QApplication::applicationDirPath() ) ).absolutePath();
-    qtTranslationsPath = prefix + qtTranslationsPath.mid( QLibraryInfo::location( QLibraryInfo::PrefixPath ).length() );
-#endif
 
-    mQtTranslator = new QTranslator( this );
-    if ( mQtTranslator->load( QStringLiteral( "qt_" ) + *sTranslation(), qtTranslationsPath ) )
-    {
-      installTranslator( mQtTranslator );
-    }
-    else
-    {
-      QgsDebugMsgLevel( QStringLiteral( "loading of qt translation failed %1/qt_%2" ).arg( qtTranslationsPath, *sTranslation() ), 2 );
-    }
-
-    mQtBaseTranslator = new QTranslator( this );
-    if ( mQtBaseTranslator->load( QStringLiteral( "qtbase_" ) + *sTranslation(), qtTranslationsPath ) )
-    {
-      installTranslator( mQtBaseTranslator );
-    }
-    else
-    {
-      QgsDebugMsgLevel( QStringLiteral( "loading of qtbase translation failed %1/qt_%2" ).arg( qtTranslationsPath, *sTranslation() ), 2 );
+      QList<QString> localePaths;
+      localePaths.append(i18nPath());
+      #ifdef Q_OS_MAC
+        translationPath(QApplication::applicationDirPath() +
+                             "/Contents/Frameworks/", localePaths);
+        translationPath(QApplication::applicationDirPath() +
+                             "/../../Contents/Frameworks/", localePaths);
+        translationPath(QApplication::applicationDirPath() +
+                             "/../Library/Frameworks/", localePaths);
+        translationPath(QApplication::applicationDirPath() +
+                             "/../../../../Library/Frameworks/", localePaths);
+      #else
+        const QString &libTrPath = QApplication::applicationDirPath()
+                  + QStringLiteral("/../share/translations");
+        localePaths.append(libTrPath);
+      #endif // Q_OS_MAC
+
+        localePaths.append(QLibraryInfo::location(QLibraryInfo::TranslationsPath));
+
+    QStringList translationFilters;
+    translationFilters << QString("ngstd_core_%1").arg(*sTranslation());
+    translationFilters << QString("ngstd_framework_%1").arg(*sTranslation());
+    translationFilters << QString("qt_%1").arg(*sTranslation());
+    translationFilters << QString("qtbase_%1").arg(*sTranslation());
+    translationFilters << QString("qgis_%1").arg(*sTranslation());
+    translationFilters << QString("qscintilla_%1").arg(*sTranslation());
+
+    for(const QString &localePath : localePaths) {
+        QgsDebugMsgLevel( QStringLiteral( "Translation path ") + localePath + QStringLiteral( " -- get translation files: "), 2);
+        for (const QString &fileName : translationFilters) {
+            QTranslator *translator = new QTranslator;
+            QString loadFile = QFileInfo(localePath, fileName).filePath();
+            if (translator->load(fileName, localePath)) {
+                QgsDebugMsgLevel( QStringLiteral( "Loaded translation file ") +  loadFile, 2);
+                installTranslator(translator);
+                mTranslators.push_back(translator);
+            }
+            else {
+                QgsDebugMsgLevel(QStringLiteral("Loading of translation failed [") + loadFile + QStringLiteral("]"), 2);
+                delete translator;
+            }
+        }
     }
   }
+
+//  if ( *sTranslation() != QLatin1String( "C" ) )
+//  {
+//    mQgisTranslator = new QTranslator( this );
+//    if ( mQgisTranslator->load( QStringLiteral( "qgis_" ) + *sTranslation(), i18nPath() ) )
+//    {
+//      installTranslator( mQgisTranslator );
+//    }
+//    else
+//    {
+//      QgsDebugMsgLevel( QStringLiteral( "loading of qgis translation failed %1/qgis_%2" ).arg( i18nPath(), *sTranslation() ), 2 );
+//    }
+
+//    /* Translation file for Qt.
+//     * The strings from the QMenuBar context section are used by Qt/Mac to shift
+//     * the About, Preferences and Quit items to the Mac Application menu.
+//     * These items must be translated identically in both qt_ and qgis_ files.
+//     */
+//    QString qtTranslationsPath = QLibraryInfo::location( QLibraryInfo::TranslationsPath );
+//#ifdef __MINGW32__
+//    QString prefix = QDir( QString( "%1/../" ).arg( QApplication::applicationDirPath() ) ).absolutePath();
+//    qtTranslationsPath = prefix + qtTranslationsPath.mid( QLibraryInfo::location( QLibraryInfo::PrefixPath ).length() );
+//#endif
+
+//    mQtTranslator = new QTranslator( this );
+//    if ( mQtTranslator->load( QStringLiteral( "qt_" ) + *sTranslation(), qtTranslationsPath ) )
+//    {
+//      installTranslator( mQtTranslator );
+//    }
+//    else
+//    {
+//      QgsDebugMsgLevel( QStringLiteral( "loading of qt translation failed %1/qt_%2" ).arg( qtTranslationsPath, *sTranslation() ), 2 );
+//    }
+
+//    mQtBaseTranslator = new QTranslator( this );
+//    if ( mQtBaseTranslator->load( QStringLiteral( "qtbase_" ) + *sTranslation(), qtTranslationsPath ) )
+//    {
+//      installTranslator( mQtBaseTranslator );
+//    }
+//    else
+//    {
+//      QgsDebugMsgLevel( QStringLiteral( "loading of qtbase translation failed %1/qt_%2" ).arg( qtTranslationsPath, *sTranslation() ), 2 );
+//    }
+//  }
 }
 
 QgsApplication::~QgsApplication()
@@ -510,9 +594,12 @@
 
   delete mDataItemProviderRegistry;
   delete mApplicationMembers;
-  delete mQgisTranslator;
-  delete mQtTranslator;
-  delete mQtBaseTranslator;
+//   delete mQgisTranslator;
+//   delete mQtTranslator;
+//   delete mQtBaseTranslator;
+  for (QTranslator *translator : mTranslators) {
+      delete translator;
+  }
 
   // we do this here as well as in exitQgis() -- it's safe to call as often as we want,
   // and there's just a *chance* that someone hasn't properly called exitQgis prior to
@@ -626,12 +713,12 @@
 void QgsApplication::setPrefixPath( const QString &prefixPath, bool useDefaultPaths )
 {
   *sPrefixPath() = prefixPath;
-#if defined(Q_OS_WIN)
-  if ( sPrefixPath()->endsWith( "/bin" ) )
-  {
-    sPrefixPath()->chop( 4 );
-  }
-#endif
+// #if defined(Q_OS_WIN)
+//   if ( sPrefixPath()->endsWith( "/bin" ) )
+//   {
+//     sPrefixPath()->chop( 4 );
+//   }
+// #endif
   if ( useDefaultPaths && !ABISYM( mRunningFromBuildDir ) )
   {
     setPluginPath( *sPrefixPath() + '/' + QStringLiteral( QGIS_PLUGIN_SUBDIR ) );
@@ -947,40 +1034,65 @@
     }
   }
 
-  QString prefixPath;
-  if ( getenv( "QGIS_PREFIX_PATH" ) )
-    prefixPath = getenv( "QGIS_PREFIX_PATH" );
-  else
-  {
-#if defined(ANDROID)
-    // this is "/data/data/org.qgis.qgis" in android
-    QDir dir( QDir::homePath() );
-    dir.cdUp();
-    prefixPath = dir.absolutePath();
-#else
+#ifdef Q_OS_WIN
+    QDir defaultPrefixDir(applicationDirPath() + QDir::separator() + "..");
 
-#if defined(Q_OS_MACX)
-    prefixPath = appPath;
-#elif defined(Q_OS_WIN)
-    prefixPath = appPath;
-    if ( prefixPath.endsWith( "/bin" ) )
-      prefixPath.chop( 4 );
+    // Add search gdal utilities paths
+    QString path = defaultPrefixDir.absolutePath();
+    qputenv("PATH", QString( "%1;%2" ).arg(path).arg(applicationDirPath()).toUtf8());
+
+#elif defined(Q_OS_MAC)
+    QDir defaultPrefixDir(applicationDirPath() + QDir::separator() + ".."
+                           + QDir::separator() + ".."
+                           + QDir::separator() + ".."
+                           + QDir::separator() + "..");
 #else
-    QDir dir( appPath );
-    // Fix for server which is one level deeper in /usr/lib/cgi-bin
-    if ( appPath.contains( QStringLiteral( "cgi-bin" ) ) )
-    {
-      dir.cdUp();
-    }
-    dir.cdUp(); // Go from /usr/bin or /usr/lib (for server) to /usr
-    prefixPath = dir.absolutePath();
+    QDir defaultPrefixDir("/usr");
 #endif
-#endif
-  }
+    QString defaultPrefixPath =  defaultPrefixDir.absolutePath();
 
-  if ( ABISYM( mRunningFromBuildDir ) )
-    return *sBuildOutputPath() + QStringLiteral( "/data" );
-  else
+    QString envPrefixPath = QString::fromLocal8Bit( qgetenv( "QGIS_PREFIX_PATH" ) );
+    QString prefixPath( envPrefixPath.isEmpty() ?
+                            defaultPrefixPath : envPrefixPath );
+    QgsDebugMsgLevel( QString( "prefixPath(): %1" ).arg( prefixPath ), 2 );
+
+
+//   if ( getenv( "QGIS_PREFIX_PATH" ) )
+//     prefixPath = getenv( "QGIS_PREFIX_PATH" );
+//   else
+//   {
+// #if defined(ANDROID)
+//     // this is "/data/data/org.qgis.qgis" in android
+//     QDir dir( QDir::homePath() );
+//     dir.cdUp();
+//     prefixPath = dir.absolutePath();
+// #else
+
+// #if defined(Q_OS_MACX)
+//     prefixPath = appPath;
+// #elif defined(Q_OS_WIN)
+//     prefixPath = appPath;
+//     if ( prefixPath.endsWith( "/bin" ) )
+//       prefixPath.chop( 4 );
+// #else
+//     QDir dir( appPath );
+//     // Fix for server which is one level deeper in /usr/lib/cgi-bin
+//     if ( appPath.contains( QStringLiteral( "cgi-bin" ) ) )
+//     {
+//       dir.cdUp();
+//     }
+//     dir.cdUp(); // Go from /usr/bin or /usr/lib (for server) to /usr
+//     prefixPath = dir.absolutePath();
+// #endif
+// #endif
+//   }
+
+    setPrefixPath( prefixPath, true );
+    qputenv("QGIS_PREFIX_PATH", prefixPath.toUtf8());
+
+//   if ( ABISYM( mRunningFromBuildDir ) )
+//     return *sBuildOutputPath() + QStringLiteral( "/data" );
+//   else
     return prefixPath + '/' + QStringLiteral( QGIS_DATA_SUBDIR );
 }
 
@@ -1139,9 +1251,9 @@
 
 QString QgsApplication::i18nPath()
 {
-  if ( ABISYM( mRunningFromBuildDir ) )
-    return *sBuildOutputPath() + QStringLiteral( "/i18n/" );
-  else
+//   if ( ABISYM( mRunningFromBuildDir ) )
+//     return *sBuildOutputPath() + QStringLiteral( "/i18n/" );
+//   else
     return pkgDataPath() + QStringLiteral( "/i18n/" );
 }
 
@@ -1182,25 +1294,25 @@
 
 QString QgsApplication::srsDatabaseFilePath()
 {
-  if ( ABISYM( mRunningFromBuildDir ) )
-  {
-    QString tempCopy = QDir::tempPath() + "/srs6.db";
-
-    if ( !QFile( tempCopy ).exists() )
-    {
-      QFile f( buildSourcePath() + "/resources/srs6.db" );
-      if ( !f.copy( tempCopy ) )
-      {
-        qFatal( "Could not create temporary copy" );
-      }
-    }
-
-    return tempCopy;
-  }
-  else
-  {
+//   if ( ABISYM( mRunningFromBuildDir ) )
+//   {
+//     QString tempCopy = QDir::tempPath() + "/srs6.db";
+
+//     if ( !QFile( tempCopy ).exists() )
+//     {
+//       QFile f( buildSourcePath() + "/resources/srs6.db" );
+//       if ( !f.copy( tempCopy ) )
+//       {
+//         qFatal( "Could not create temporary copy" );
+//       }
+//     }
+
+//     return tempCopy;
+//   }
+//   else
+//   {
     return pkgDataPath() + QStringLiteral( "/resources/srs.db" );
-  }
+//   }
 }
 
 void QgsApplication::setSvgPaths( const QStringList &svgPaths )
@@ -1298,12 +1410,12 @@
     return *sUserName();
 
   //backup plan - use environment variables
-  *sUserName() = qgetenv( "USER" );
+  *sUserName() = QString::fromLocal8Bit(qgetenv( "USER" ));
   if ( !sUserName()->isEmpty() )
     return *sUserName();
 
   //last resort
-  *sUserName() = qgetenv( "USERNAME" );
+  *sUserName() = QString::fromLocal8Bit(qgetenv( "USERNAME" ));
   return *sUserName();
 }
 
@@ -1329,8 +1441,8 @@
   //fall back to login name
   if ( sUserFullName()->isEmpty() )
     *sUserFullName() = userLoginName();
-#elif defined(Q_OS_ANDROID) || defined(__MINGW32__)
-  *sUserFullName() = QStringLiteral( "Not available" );
+// #elif defined(Q_OS_ANDROID) || defined(__MINGW32__)
+//   *sUserFullName() = QStringLiteral( "Not available" );
 #else
   struct passwd *p = getpwuid( getuid() );
 
@@ -1526,6 +1638,7 @@
   {
     if ( !lInstance->mAuthManager )
     {
+      NGAuthManager::initInstance();
       lInstance->mAuthManager = QgsAuthManager::instance();
     }
     return lInstance->mAuthManager;
@@ -1533,8 +1646,11 @@
   else
   {
     // no QgsApplication instance
-    if ( !sAuthManager )
+    if (!sAuthManager)
+    {
+      NGAuthManager::initInstance();
       sAuthManager = QgsAuthManager::instance();
+    }
     return sAuthManager;
   }
 }
@@ -1583,28 +1699,36 @@
 
 QString QgsApplication::showSettings()
 {
-  QString myEnvironmentVar( getenv( "QGIS_PREFIX_PATH" ) );
+  QString myEnvironmentVar = QString::fromLocal8Bit(qgetenv( "QGIS_PREFIX_PATH" ) );
   QString myState = tr( "Application state:\n"
                         "QGIS_PREFIX_PATH env var:\t\t%1\n"
                         "Prefix:\t\t%2\n"
-                        "Plugin Path:\t\t%3\n"
-                        "Package Data Path:\t%4\n"
-                        "Active Theme Name:\t%5\n"
-                        "Active Theme Path:\t%6\n"
-                        "Default Theme Path:\t%7\n"
-                        "SVG Search Paths:\t%8\n"
-                        "User DB Path:\t%9\n"
-                        "Auth DB Path:\t%10\n" )
+                        "Library Path:\t\t%3\n"
+                        "Plugin Path:\t\t%4\n"
+                        "Package Data Path:\t%5\n"
+                        "Active Theme Name:\t%6\n"
+                        "Active Theme Path:\t%7\n"
+                        "Default Theme Path:\t%8\n"
+                        "SVG Search Paths:\t%9\n"
+                        "User DB Path:\t%10\n"
+                        "Auth DB Path:\t%11\n"
+                        "Translations Path:\t%12\n"
+                        "SRS DB Path:\t%13\n"
+                        "Icons Path:\t%14\n"  )
                     .arg( myEnvironmentVar,
                           prefixPath(),
+                          libraryPath(),
                           pluginPath(),
                           pkgDataPath(),
                           themeName(),
                           activeThemePath(),
                           defaultThemePath(),
-                          svgPaths().join( tr( "\n\t\t", "match indentation of application state" ) ),
-                          qgisMasterDatabaseFilePath() )
-                    .arg( qgisAuthDatabaseFilePath() );
+                          svgPaths().join( tr( "\n\t\t", "match indentation of application state" ) ) )
+                    .arg( qgisMasterDatabaseFilePath(),
+                          qgisAuthDatabaseFilePath(), 
+                          i18nPath(),
+                          srsDatabaseFilePath(),
+                          iconsPath() );
   return myState;
 }
 
@@ -2113,7 +2237,7 @@
   ApplicationMembers *appMembers = members();
   if ( appMembers->mNullRepresentation.isNull() )
   {
-    appMembers->mNullRepresentation = QgsSettings().value( QStringLiteral( "qgis/nullValue" ), QStringLiteral( "NULL" ) ).toString();
+    appMembers->mNullRepresentation = QgsSettings().value( QStringLiteral( "qgis/nullValue" ), QStringLiteral( "<NULL>" ) ).toString();
   }
   return appMembers->mNullRepresentation;
 }
@@ -2154,8 +2278,7 @@
 #else
   //under other OS's we use an environment var so the user can
   //override the path if he likes
-  int myChangeFlag = 0; //whether we want to force the env var to change
-  setenv( "GDAL_PAM_PROXY_DIR", myPamPath.toUtf8(), myChangeFlag );
+  qputenv( "GDAL_PAM_PROXY_DIR", myPamPath.toUtf8() );
 #endif
 
   // Check qgis.db and make private copy if necessary
@@ -2503,15 +2626,15 @@
   return members()->mSensorRegistry;
 }
 
-QgsGpsConnectionRegistry *QgsApplication::gpsConnectionRegistry()
-{
-  return members()->mGpsConnectionRegistry;
-}
-
-QgsBabelFormatRegistry *QgsApplication::gpsBabelFormatRegistry()
-{
-  return members()->mGpsBabelFormatRegistry;
-}
+// QgsGpsConnectionRegistry *QgsApplication::gpsConnectionRegistry()
+// {
+//   return members()->mGpsConnectionRegistry;
+// }
+
+// QgsBabelFormatRegistry *QgsApplication::gpsBabelFormatRegistry()
+// {
+//   return members()->mGpsBabelFormatRegistry;
+// }
 
 QgsPluginLayerRegistry *QgsApplication::pluginLayerRegistry()
 {
@@ -2613,10 +2736,10 @@
   return members()->mProjectStorageRegistry;
 }
 
-QgsExternalStorageRegistry *QgsApplication::externalStorageRegistry()
-{
-  return members()->mExternalStorageRegistry;
-}
+// QgsExternalStorageRegistry *QgsApplication::externalStorageRegistry()
+// {
+//   return members()->mExternalStorageRegistry;
+// }
 
 QgsLocalizedDataPathRegistry *QgsApplication::localizedDataPathRegistry()
 {
@@ -2737,16 +2860,16 @@
     mPointCloudRendererRegistry = new QgsPointCloudRendererRegistry();
     profiler->end();
   }
-  {
-    profiler->start( tr( "Setup GPS registry" ) );
-    mGpsConnectionRegistry = new QgsGpsConnectionRegistry();
-    profiler->end();
-  }
-  {
-    profiler->start( tr( "Setup GPSBabel format registry" ) );
-    mGpsBabelFormatRegistry = new QgsBabelFormatRegistry();
-    profiler->end();
-  }
+//   {
+//     profiler->start( tr( "Setup GPS registry" ) );
+//     mGpsConnectionRegistry = new QgsGpsConnectionRegistry();
+//     profiler->end();
+//   }
+//   {
+//     profiler->start( tr( "Setup GPSBabel format registry" ) );
+//     mGpsBabelFormatRegistry = new QgsBabelFormatRegistry();
+//     profiler->end();
+//   }
   {
     profiler->start( tr( "Setup plugin layer registry" ) );
     mPluginLayerRegistry = new QgsPluginLayerRegistry();
@@ -2791,11 +2914,11 @@
     m3DRendererRegistry = new Qgs3DRendererRegistry();
     profiler->end();
   }
-  {
-    profiler->start( tr( "Setup external storage registry" ) );
-    mExternalStorageRegistry = new QgsExternalStorageRegistry();
-    profiler->end();
-  }
+//   {
+//     profiler->start( tr( "Setup external storage registry" ) );
+//     mExternalStorageRegistry = new QgsExternalStorageRegistry();
+//     profiler->end();
+//   }
   {
     profiler->start( tr( "Setup network content cache" ) );
     mNetworkContentFetcherRegistry = new QgsNetworkContentFetcherRegistry();
@@ -2840,8 +2963,8 @@
   delete mAnnotationRegistry;
   delete mColorSchemeRegistry;
   delete mFieldFormatterRegistry;
-  delete mGpsConnectionRegistry;
-  delete mGpsBabelFormatRegistry;
+//  delete mGpsConnectionRegistry;
+//  delete mGpsBabelFormatRegistry;
   delete mMessageLog;
   delete mPaintEffectRegistry;
   delete mPluginLayerRegistry;
@@ -2859,7 +2982,7 @@
   delete mCalloutRegistry;
   delete mRecentStyleHandler;
   delete mSymbolLayerRegistry;
-  delete mExternalStorageRegistry;
+//   delete mExternalStorageRegistry;
   delete mTaskManager;
   delete mNetworkContentFetcherRegistry;
   delete mClassificationMethodRegistry;
@@ -2890,3 +3013,8 @@
     return sApplicationMembers;
   }
 }
+
+QString QgsApplication::fontsPath()
+{
+    return pkgDataPath() + QDir::separator() + QStringLiteral( "fonts" );
+}
