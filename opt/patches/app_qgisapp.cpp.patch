--- a/src/app/qgisapp.cpp	2023-08-21 19:39:45.659051792 +0300
+++ b/src/app/qgisapp.cpp	2023-10-03 23:20:39.946034141 +0300
@@ -110,8 +110,8 @@
 
 #include "options/qgscodeeditoroptions.h"
 #include "options/qgsfontoptions.h"
-#include "options/qgsgpsdeviceoptions.h"
-#include "options/qgsgpsoptions.h"
+// #include "options/qgsgpsdeviceoptions.h"
+// #include "options/qgsgpsoptions.h"
 #include "options/qgscustomprojectionoptions.h"
 #include "options/qgsrasterrenderingoptions.h"
 #include "options/qgsrenderingoptions.h"
@@ -232,9 +232,9 @@
 #include "qgsdatumtransformdialog.h"
 #include "qgsdoublespinbox.h"
 #include "qgsdockwidget.h"
-#include "qgsdxfexport.h"
-#include "qgsdxfexportdialog.h"
-#include "qgsdwgimportdialog.h"
+// #include "qgsdxfexport.h"
+// #include "qgsdxfexportdialog.h"
+// #include "qgsdwgimportdialog.h"
 #include "qgsdecorationtitle.h"
 #include "qgsdecorationcopyright.h"
 #include "qgsdecorationimage.h"
@@ -255,13 +255,13 @@
 #include "qgsformannotation.h"
 #include "qgsguiutils.h"
 #include "qgsprojectionselectiondialog.h"
-#include "qgsgpsinformationwidget.h"
-#include "qgsappgpsconnection.h"
-#include "qgsappgpsdigitizing.h"
-#include "qgsappgpslogging.h"
-#include "qgsappgpssettingsmenu.h"
-#include "qgsgpstoolbar.h"
-#include "qgsgpscanvasbridge.h"
+// #include "qgsgpsinformationwidget.h"
+// #include "qgsappgpsconnection.h"
+// #include "qgsappgpsdigitizing.h"
+// #include "qgsappgpslogging.h"
+// #include "qgsappgpssettingsmenu.h"
+// #include "qgsgpstoolbar.h"
+// #include "qgsgpscanvasbridge.h"
 #include "qgsguivectorlayertools.h"
 #include "qgsdiagramproperties.h"
 #include "qgslayerdefinition.h"
@@ -318,7 +318,7 @@
 #include "qgsmapoverviewcanvas.h"
 #include "qgsmapsettings.h"
 #include "qgsmaptip.h"
-#include "qgsmbtiles.h"
+// #include "qgsmbtiles.h"
 #include "qgsmergeattributesdialog.h"
 #include "qgsmessageviewer.h"
 #include "qgsmessagebar.h"
@@ -396,8 +396,8 @@
 #include "qgsvectorlayer.h"
 #include "qgsvectorlayerproperties.h"
 #include "qgsvectorlayerdigitizingproperties.h"
-#include "qgsvectortilelayer.h"
-#include "qgsvectortilelayerproperties.h"
+// #include "qgsvectortilelayer.h"
+// #include "qgsvectortilelayerproperties.h"
 #include "qgspointcloudlayerproperties.h"
 #include "qgsmapthemes.h"
 #include "qgsmessagelogviewer.h"
@@ -1436,7 +1436,7 @@
 
   addDockWidget( Qt::LeftDockWidgetArea, mBookMarksDockWidget );
   mBookMarksDockWidget->hide();
-
+/*
   // create the GPS tool on starting QGIS - this is like the browser
   mGpsConnection = new QgsAppGpsConnection( this );
   mGpsSettingsMenu = new QgsAppGpsSettingsMenu( this );
@@ -1488,7 +1488,7 @@
   mpGpsDock->setWidget( gpsStack );
   mpGpsDock->setToggleVisibilityAction( mGpsToolBar->showInfoAction() );
   mpGpsDock->hide();
-
+*/
 
   mLastMapToolMessage = nullptr;
 
@@ -1918,8 +1918,8 @@
   mOptionWidgetFactories.emplace_back( QgsScopedOptionsWidgetFactory( std::make_unique< QgsRenderingOptionsFactory >() ) );
   mOptionWidgetFactories.emplace_back( QgsScopedOptionsWidgetFactory( std::make_unique< QgsVectorRenderingOptionsFactory >() ) );
   mOptionWidgetFactories.emplace_back( QgsScopedOptionsWidgetFactory( std::make_unique< QgsRasterRenderingOptionsFactory >() ) );
-  mOptionWidgetFactories.emplace_back( QgsScopedOptionsWidgetFactory( std::make_unique< QgsGpsOptionsFactory >() ) );
-  mOptionWidgetFactories.emplace_back( QgsScopedOptionsWidgetFactory( std::make_unique< QgsGpsDeviceOptionsFactory >() ) );
+//   mOptionWidgetFactories.emplace_back( QgsScopedOptionsWidgetFactory( std::make_unique< QgsGpsOptionsFactory >() ) );
+//   mOptionWidgetFactories.emplace_back( QgsScopedOptionsWidgetFactory( std::make_unique< QgsGpsDeviceOptionsFactory >() ) );
   mOptionWidgetFactories.emplace_back( QgsScopedOptionsWidgetFactory( std::make_unique< QgsCustomProjectionOptionsFactory >() ) );
   mOptionWidgetFactories.emplace_back( QgsScopedOptionsWidgetFactory( std::make_unique< QgsFontOptionsFactory >() ) );
   mOptionWidgetFactories.emplace_back( QgsScopedOptionsWidgetFactory( std::make_unique< QgsUserProfileOptionsFactory >() ) );
@@ -2078,10 +2078,10 @@
 
   delete mpMaptip;
 
-  delete mpGpsWidget;
+//   delete mpGpsWidget;
   mpGpsWidget = nullptr;
 
-  delete mGpsToolBar;
+//   delete mGpsToolBar;
   mGpsToolBar = nullptr;
 
   delete mGpsCanvasBridge;
@@ -2438,7 +2438,7 @@
       if ( layer )
         addedLayers << layer;
     }
-    else if ( u.layerType == QLatin1String( "vector-tile" ) )
+    /*else if ( u.layerType == QLatin1String( "vector-tile" ) )
     {
       QgsTemporaryCursorOverride busyCursor( Qt::WaitCursor );
 
@@ -2534,7 +2534,7 @@
         group->addLayer( layer );
         addedLayers << layer;
       }
-    }
+    }*/
     else if ( u.layerType == QLatin1String( "plugin" ) )
     {
       QgsMapLayer *layer = QgsAppLayerHandling::addPluginLayer( uri, u.name, u.providerKey, addToLegend );
@@ -2644,7 +2644,7 @@
         QgsAppLayerHandling::postProcessAddedLayers( addedLayers );
     } );
     connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::addMeshLayer, this, &QgisApp::addMeshLayer );
-    connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::addVectorTileLayer, this, &QgisApp::addVectorTileLayer );
+    // connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::addVectorTileLayer, this, &QgisApp::addVectorTileLayer );
     connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::addPointCloudLayer, this, &QgisApp::addPointCloudLayer );
     connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::showStatusMessage, this, &QgisApp::showStatusMessage );
     connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::addDatabaseLayers, this, []( const QStringList & layerPathList, const QString & providerKey )
@@ -2820,8 +2820,8 @@
   connect( mActionNewReport, &QAction::triggered, this, &QgisApp::newReport );
   connect( mActionShowLayoutManager, &QAction::triggered, this, &QgisApp::showLayoutManager );
   connect( mActionExit, &QAction::triggered, this, &QgisApp::fileExit );
-  connect( mActionDxfExport, &QAction::triggered, this, &QgisApp::dxfExport );
-  connect( mActionDwgImport, &QAction::triggered, this, &QgisApp::dwgImport );
+//   connect( mActionDxfExport, &QAction::triggered, this, &QgisApp::dxfExport );
+//   connect( mActionDwgImport, &QAction::triggered, this, &QgisApp::dwgImport );
 
   // Edit Menu Items
 
@@ -2948,9 +2948,9 @@
   connect( mActionAddHanaLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "hana" ) ); } );
   connect( mActionAddWmsLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "wms" ) ); } );
   connect( mActionAddXyzLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "xyz" ) ); } );
-  connect( mActionAddVectorTileLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "vectortile" ) ); } );
+//   connect( mActionAddVectorTileLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "vectortile" ) ); } );
   connect( mActionAddPointCloudLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "pointcloud" ) ); } );
-  connect( mActionAddGpsLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "gpx" ) ); } );
+//   connect( mActionAddGpsLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "gpx" ) ); } );
   connect( mActionAddWcsLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "wcs" ) ); } );
 #ifdef HAVE_SPATIALITE
   connect( mActionAddWfsLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "WFS" ) ); } );
@@ -5009,12 +5009,12 @@
   }
   return QgsLayerTreeRegistryBridge::InsertionPoint( insertGroup, index );
 }
-
+/*
 void QgisApp::setGpsPanelConnection( QgsGpsConnection *connection )
 {
   mGpsConnection->setConnection( connection );
 }
-
+*/
 QgsAppGpsSettingsMenu *QgisApp::gpsSettingsMenu()
 {
   return mGpsSettingsMenu;
@@ -5330,7 +5330,7 @@
   QgsPluginRegistry::instance()->unloadAll();
 }
 
-#include "ui_defaults.h"
+#include "ngui_defaults.h"
 
 void QgisApp::restoreWindowState()
 {
@@ -5599,12 +5599,12 @@
 {
   return QgsAppLayerHandling::addMeshLayer( url, baseName, providerKey );
 }
-
+/*
 QgsVectorTileLayer *QgisApp::addVectorTileLayer( const QString &url, const QString &baseName )
 {
   return QgsAppLayerHandling::addVectorTileLayer( url, baseName );
 }
-
+*/
 QgsPointCloudLayer *QgisApp::addPointCloudLayer( const QString &url, const QString &baseName, const QString &providerKey )
 {
   return QgsAppLayerHandling::addPointCloudLayer( url, baseName, providerKey );
@@ -6713,7 +6713,7 @@
   }
   mProjectLastModified = fullPath.lastModified();
 } // QgisApp::fileSaveAs
-
+/*
 void QgisApp::dxfExport()
 {
   QgsDxfExportDialog d;
@@ -6781,7 +6781,7 @@
   QgsDwgImportDialog d;
   d.exec();
 }
-
+*/
 void QgisApp::openTemplate( const QString &fileName )
 {
   QFile templateFile;
@@ -12190,7 +12190,7 @@
 {
   QgsScopedRuntimeProfile profile( tr( "Loading Python support" ) );
 
-  QString pythonlibName( QStringLiteral( "qgispython" ) );
+  QString pythonlibName( QStringLiteral( "ngqgispython" ) );
 #if defined(Q_OS_UNIX)
   pythonlibName.prepend( QgsApplication::libraryPath() );
 #endif
@@ -12499,7 +12499,7 @@
     mMagnifierWidget->setDefaultFactor( factor );
     mMagnifierWidget->updateMagnification( factor );
 
-    mWelcomePage->updateNewsFeedVisibility();
+    // mWelcomePage->updateNewsFeedVisibility();
   }
 }
 
@@ -15368,7 +15368,7 @@
     }
 
     break;
-
+/*
     case Qgis::LayerType::VectorTile:
     {
       QgsVectorTileLayer *vtLayer = qobject_cast< QgsVectorTileLayer * >( layer );
@@ -15440,7 +15440,7 @@
       enableMeshEditingTools( false );
       break;
     }
-
+*/
     case Qgis::LayerType::PointCloud:
     {
       const QgsDataProvider *dprovider = layer->dataProvider();
@@ -16332,7 +16332,7 @@
       delete vectorLayerPropertiesDialog; // delete since dialog cannot be reused without updating code
       break;
     }
-
+/*
     case Qgis::LayerType::VectorTile:
     {
       QgsVectorTileLayerProperties vectorTileLayerPropertiesDialog( qobject_cast<QgsVectorTileLayer *>( mapLayer ), mMapCanvas, visibleMessageBar(), this );
@@ -16350,7 +16350,7 @@
       mMapStyleWidget->blockUpdates( false ); // delete since dialog cannot be reused without updating code
       break;
     }
-
+*/
     case Qgis::LayerType::PointCloud:
     {
       QgsPointCloudLayerProperties pointCloudLayerPropertiesDialog( qobject_cast<QgsPointCloudLayer *>( mapLayer ), mMapCanvas, visibleMessageBar(), this );
